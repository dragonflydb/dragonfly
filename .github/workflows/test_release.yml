name: Test Version Release

on:
  # push:
  # branches: [ main ]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  RELEASE_DIR: build-release

jobs:
  build-arm:
    runs-on: ubuntu-24.04-arm
    name: Build arm64 on ubuntu-24.04-arm
    container:
      image: ghcr.io/romange/ubuntu-dev:20
      options: --security-opt seccomp=unconfined --sysctl "net.ipv6.conf.all.disable_ipv6=0"
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Build artifacts
      run: |
            # Work around https://github.com/actions/checkout/issues/766
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git describe --always --tags ${{ github.sha }}
            ./tools/release.sh
            ./tools/packaging/generate_debian_package.sh ${{ env.RELEASE_DIR }}/dragonfly-aarch64
            mv dragonfly_*.deb ${{ env.RELEASE_DIR }}/

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: dragonfly-aarch64
        path: |
          ${{ env.RELEASE_DIR }}/dragonfly-*tar.gz
          ${{ env.RELEASE_DIR }}/dragonfly_*.deb
          ${{ env.RELEASE_DIR }}/dfly_bench

  build-native:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Build with these flags
          - name: debian
            container: ubuntu-dev:20
          - name: rpm
            container: fedora:30
    container:
      image: ghcr.io/romange/${{ matrix.container }}
      options: --security-opt seccomp=unconfined --sysctl "net.ipv6.conf.all.disable_ipv6=0"
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Configure
      run: |
          if [ -f /etc/redhat-release ]; then
            dnf install -y rpm-build libstdc++-static
          fi
    - name: Build artifacts
      timeout-minutes: 25
      run: |
          # Work around https://github.com/actions/checkout/issues/766
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git describe --always --tags ${{ github.sha }}
          ./tools/release.sh

          # once the build is over, we want to generate a Debian package
          if [ -f /etc/debian_version ]; then
            ./tools/packaging/generate_debian_package.sh ${{ env.RELEASE_DIR }}/dragonfly-x86_64
          else
            echo "Creating package for ${{github.ref_name}}"
            #./tools/packaging/rpm/build_rpm.sh ${{ env.RELEASE_DIR }}/dragonfly-x86_64.tar.gz ${{github.ref_name}}
          fi

    - name: Save artifacts
      run: |
          # place all artifacts at the same location
          mkdir -p results-artifacts
          if [ -f /etc/debian_version ]; then
            mv ${{ env.RELEASE_DIR }}/dragonfly-*tar.gz results-artifacts
            mv dragonfly_*.deb results-artifacts
          else
          #ls -l *.rpm
            ls -lah
          #mv ./*.rpm ./results-artifacts/
          fi
          mv ${{ env.RELEASE_DIR }}/dfly_bench results-artifacts
    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: dragonfly-amd64-${{ matrix.name }}
        path: results-artifacts/*
