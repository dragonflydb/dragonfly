name: AFL++ Fuzzing Smoke Test

on:
  push:
    branches:
      - '**'  # Run on push to any branch for testing
    paths:
      - '.github/workflows/fuzz-smoke.yml'  # Only trigger on workflow changes
  # TODO: Uncomment after testing
  # pull_request:
  #   branches: [main]
  #   paths:
  #     - 'src/**'
  #     - 'fuzz/**'
  #     - '.github/workflows/fuzz-smoke.yml'
  workflow_dispatch:
    inputs:
      duration:
        description: 'Fuzzing duration in minutes'
        required: false
        default: '5'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  fuzz-smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    container:
      image: ghcr.io/romange/ubuntu-dev:24
      options: --security-opt seccomp=unconfined --sysctl "net.ipv6.conf.all.disable_ipv6=0"
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: Install AFL++
        run: |
          echo "Installing AFL++..."
          apt-get update -qq
          apt-get install -y -qq afl++ lld-17 > /dev/null

          echo "AFL++ installed successfully"
          afl-fuzz -h | head -5

          # Verify AFL++ compilers are available
          which afl-clang-lto
          which afl-clang-lto++
          afl-clang-lto --version

      - name: Configure system for fuzzing
        run: |
          echo "Configuring system for AFL++ fuzzing..."
          afl-system-config

          # Explicitly set core_pattern (afl-system-config might not work in containers)
          echo core > /proc/sys/kernel/core_pattern || echo "Warning: Could not set core_pattern"

          echo "System configured"

      - name: Build Dragonfly with AFL++
        run: |
          echo "Building Dragonfly with AFL++ instrumentation..."
          ./helio/blaze.sh -DUSE_AFL:BOOL=ON
          cd ./build-dbg && ninja dragonfly && cd ..
          echo "Build complete"
          ls -lh ./build-dbg/dragonfly

      - name: Run AFL++ smoke test
        env:
          AFL_BENCH_UNTIL_CRASH: 1                  # Stop on first crash
          AFL_NO_UI: 1                              # Disable UI for CI
          AFL_AUTORESUME: 1                         # Auto-resume if output dir exists
          AFL_TESTCACHE_SIZE: 50                    # Smaller cache for smoke test
          AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES: 1  # Ignore core_pattern in containers
        run: |
          echo "Starting AFL++ fuzzing smoke test..."

          DURATION_MINUTES="${{ github.event.inputs.duration || '5' }}"
          echo "Duration: ${DURATION_MINUTES} minutes"

          cd fuzz

          # Set build directory
          export BUILD_DIR="${GITHUB_WORKSPACE}/build-dbg"

          # Run fuzzer with timeout
          # Use 'timeout' with kill signal to ensure AFL++ stops cleanly
          timeout ${DURATION_MINUTES}m ./run_fuzzer.sh || EXIT_CODE=$?

          # timeout returns 124 if it timed out (expected), 0 if finished naturally
          if [ "${EXIT_CODE:-0}" -eq 124 ]; then
            echo "Fuzzing completed (timeout reached)"
          elif [ "${EXIT_CODE:-0}" -eq 0 ]; then
            echo "Fuzzing completed normally"
          else
            echo "Fuzzing exited with code ${EXIT_CODE}"
            # Don't fail yet - check for crashes in next step
          fi

      - name: Check for crashes
        if: always()
        id: check_crashes
        run: |
          echo "Checking for crashes..."

          CRASHES_DIR="fuzz/artifacts/resp/default/crashes"
          HANGS_DIR="fuzz/artifacts/resp/default/hangs"

          # Count crashes (excluding README.txt)
          if [ -d "$CRASHES_DIR" ]; then
            CRASH_COUNT=$(find "$CRASHES_DIR" -type f ! -name "README.txt" 2>/dev/null | wc -l)
          else
            CRASH_COUNT=0
          fi

          # Count hangs
          if [ -d "$HANGS_DIR" ]; then
            HANG_COUNT=$(find "$HANGS_DIR" -type f ! -name "README.txt" 2>/dev/null | wc -l)
          else
            HANG_COUNT=0
          fi

          echo "crash_count=$CRASH_COUNT" >> $GITHUB_OUTPUT
          echo "hang_count=$HANG_COUNT" >> $GITHUB_OUTPUT

          echo "Fuzzing Results:"
          echo "   Crashes: $CRASH_COUNT"
          echo "   Hangs: $HANG_COUNT"

          if [ "$CRASH_COUNT" -gt 0 ]; then
            echo "::error::Found $CRASH_COUNT crash(es)!"
            echo ""
            echo "Crash files:"
            ls -lh "$CRASHES_DIR"
            echo ""
            echo "::error::Fuzzing discovered crashes"
            exit 1
          fi

          if [ "$HANG_COUNT" -gt 0 ]; then
            echo "::error::Found $HANG_COUNT hang(s)!"
            echo ""
            echo "Hang files:"
            ls -lh "$HANGS_DIR"
            echo ""
            echo "::error::Fuzzing discovered hangs"
            exit 1
          fi

          echo "No crashes or hangs found - fuzzing smoke test passed!"

      - name: Archive fuzzing artifacts
        if: always()
        run: |
          # Archive artifacts to avoid filename issues (AFL++ uses colons which GitHub Actions can't handle)
          cd fuzz/artifacts/resp/default

          # Archive crashes if they exist
          if [ -d crashes ] && [ "$(ls -A crashes 2>/dev/null)" ]; then
            tar -czf crashes.tar.gz crashes/
          fi

          # Archive hangs if they exist
          if [ -d hangs ] && [ "$(ls -A hangs 2>/dev/null)" ]; then
            tar -czf hangs.tar.gz hangs/
          fi

          # Archive corpus/queue if it exists
          if [ -d queue ] && [ "$(ls -A queue 2>/dev/null)" ]; then
            tar -czf corpus.tar.gz queue/
          fi

      - name: Upload fuzzing artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz-smoke-artifacts-${{ github.run_number }}
          path: |
            fuzz/artifacts/resp/default/*.tar.gz
            fuzz/artifacts/resp/default/fuzzer_stats
            fuzz/artifacts/resp/default/plot_data
          retention-days: 10
          if-no-files-found: ignore
