name: Test Version Comparison

on:
  workflow_dispatch:
    inputs:
      current_version:
        description: 'Current version to test (without v prefix)'
        required: true
      latest_version:
        description: 'Latest version to compare with (without v prefix)'
        required: true

jobs:
  test_comparison:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test version comparison
        shell: bash
        run: |
          # Input values
          current_version="${{ github.event.inputs.current_version }}"
          latest_version="${{ github.event.inputs.latest_version }}"

          echo "Testing with current_version=$current_version, latest_version=$latest_version"

          # Compare versions only if we have a latest version
          should_update_latest=true
          if [[ -n "$latest_version" ]]; then
            # Simple semantic version comparison
            # Extract major.minor.patch components
            IFS='.' read -ra CURRENT_PARTS <<< "$current_version"
            IFS='.' read -ra LATEST_PARTS <<< "$latest_version"

            # Pad arrays to same length for comparison
            while [ ${#CURRENT_PARTS[@]} -lt 3 ]; do CURRENT_PARTS+=(0); done
            while [ ${#LATEST_PARTS[@]} -lt 3 ]; do LATEST_PARTS+=(0); done

            # Compare major.minor.patch numerically
            if (( 10#${CURRENT_PARTS[0]} < 10#${LATEST_PARTS[0]} )); then
              should_update_latest=false
            elif (( 10#${CURRENT_PARTS[0]} == 10#${LATEST_PARTS[0]} )) && (( 10#${CURRENT_PARTS[1]} < 10#${LATEST_PARTS[1]} )); then
              should_update_latest=false
            elif (( 10#${CURRENT_PARTS[0]} == 10#${LATEST_PARTS[0]} )) && (( 10#${CURRENT_PARTS[1]} == 10#${LATEST_PARTS[1]} )) && (( 10#${CURRENT_PARTS[2]} < 10#${LATEST_PARTS[2]} )); then
              should_update_latest=false
            fi

            echo "Version comparison: current=${CURRENT_PARTS[0]}.${CURRENT_PARTS[1]}.${CURRENT_PARTS[2]} vs latest=${LATEST_PARTS[0]}.${LATEST_PARTS[1]}.${LATEST_PARTS[2]}"
          fi

          if [[ "$should_update_latest" == true ]]; then
            echo "Version $current_version is newer than or equal to current latest ($latest_version), would update latest tag"
          else
            echo "Version $current_version is older than current latest ($latest_version), would NOT update latest tag"
          fi

          # Test additional cases with the exact same logic
          test_additional_cases() {
            local current=$1
            local latest=$2
            local expected=$3

            echo "Testing: current=$current, latest=$latest"

            # Compare versions only if we have a latest version
            local should_update=true
            if [[ -n "$latest" ]]; then
              # Simple semantic version comparison
              # Extract major.minor.patch components
              IFS='.' read -ra CURR_PARTS <<< "$current"
              IFS='.' read -ra LAST_PARTS <<< "$latest"

              # Pad arrays to same length for comparison
              while [ ${#CURR_PARTS[@]} -lt 3 ]; do CURR_PARTS+=(0); done
              while [ ${#LAST_PARTS[@]} -lt 3 ]; do LAST_PARTS+=(0); done

              # Compare major.minor.patch numerically
              if (( 10#${CURR_PARTS[0]} < 10#${LAST_PARTS[0]} )); then
                should_update=false
              elif (( 10#${CURR_PARTS[0]} == 10#${LAST_PARTS[0]} )) && (( 10#${CURR_PARTS[1]} < 10#${LAST_PARTS[1]} )); then
                should_update=false
              elif (( 10#${CURR_PARTS[0]} == 10#${LAST_PARTS[0]} )) && (( 10#${CURR_PARTS[1]} == 10#${LAST_PARTS[1]} )) && (( 10#${CURR_PARTS[2]} < 10#${LAST_PARTS[2]} )); then
                should_update=false
              fi
            fi

            if [[ "$should_update" == true ]]; then
              local result="SHOULD"
            else
              local result="should NOT"
            fi

            echo "Result: Version $current $result replace $latest as latest (Expected: $expected)"
            if [[ "$result" == "$expected" ]]; then
              echo "✅ Test passed"
            else
              echo "❌ Test failed"
            fi
            echo "---"
          }

          echo -e "\nAdditional test cases:"
          test_additional_cases "1.28.0" "1.27.3" "SHOULD"
          test_additional_cases "1.27.3" "1.28.0" "should NOT"
          test_additional_cases "1.28.0" "1.28.0" "SHOULD"
          test_additional_cases "2.0.0" "1.99.99" "SHOULD"
          test_additional_cases "1.2.3" "01.02.03" "SHOULD"
