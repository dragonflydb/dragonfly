name: Test Latest Tag Update Logic

on:
  push:
    branches: [ "**" ]
    paths:
      - '.github/workflows/test-latest-tag-update.yml'
  workflow_dispatch:
    inputs:
      current_version:
        description: 'Version to test (e.g., 1.2.3)'
        required: true
        default: '1.0.0'
      latest_version:
        description: 'Current latest version (e.g., 1.1.0)'
        required: true
        default: '0.9.0'

jobs:
  test_latest_tag_update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Latest Tag Update Logic
        run: |
          # Create outer function as in docker-release2.yml
          create_and_push_manifests() {
            local registry=$1
            local sha_amd=$2
            local sha_arm=$3
            local flavor=$4
            local tag_name=$5
            local is_prerelease=$6

            # Function for semantic version comparison
            # Returns true if current_version >= latest_version
            semver_cmp() {
              local current_version=$1
              local latest_version=$2
              local should_update=true

              # Extract major.minor.patch components
              IFS='.' read -ra CURRENT_PARTS <<< "$current_version"
              IFS='.' read -ra LATEST_PARTS <<< "$latest_version"

              # Pad arrays to same length for comparison
              while [ ${#CURRENT_PARTS[@]} -lt 3 ]; do CURRENT_PARTS+=(0); done
              while [ ${#LATEST_PARTS[@]} -lt 3 ]; do LATEST_PARTS+=(0); done

              # Compare major.minor.patch numerically
              if (( 10#${CURRENT_PARTS[0]} < 10#${LATEST_PARTS[0]} )); then
                should_update=false
              elif (( 10#${CURRENT_PARTS[0]} == 10#${LATEST_PARTS[0]} )) && (( 10#${CURRENT_PARTS[1]} < 10#${LATEST_PARTS[1]} )); then
                should_update=false
              elif (( 10#${CURRENT_PARTS[0]} == 10#${LATEST_PARTS[0]} )) && (( 10#${CURRENT_PARTS[1]} == 10#${LATEST_PARTS[1]} )) && (( 10#${CURRENT_PARTS[2]} < 10#${LATEST_PARTS[2]} )); then
                should_update=false
              fi

              # Log debug info to stderr instead of stdout
              echo "Version comparison: current=${CURRENT_PARTS[0]}.${CURRENT_PARTS[1]}.${CURRENT_PARTS[2]} vs latest=${LATEST_PARTS[0]}.${LATEST_PARTS[1]}.${LATEST_PARTS[2]}" >&2

              # Return only the result
              echo $should_update
            }

            # Get versions from workflow inputs or set defaults
            if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              CURRENT_VERSION="${{ github.event.inputs.current_version }}"
              LATEST_VERSION="${{ github.event.inputs.latest_version }}"
            else
              # Default test values
              CURRENT_VERSION="1.0.0"
              LATEST_VERSION="0.9.0"
            fi

            echo "===== Testing Latest Tag Update Logic ====="
            echo "Registry: ${registry}"
            echo "Tag name: ${tag_name:-$CURRENT_VERSION}"
            echo "Current version: ${CURRENT_VERSION}"
            echo "Latest version: ${LATEST_VERSION}"

            # Remove 'v' prefix if present for semantic comparison
            current_version=${CURRENT_VERSION#v}
            latest_version=${LATEST_VERSION#v}

            # Test the actual comparison logic
            should_update_latest=$(semver_cmp "$current_version" "$latest_version")

            echo "Should update latest tag: $should_update_latest"

            # Simulate the actual tag update logic
            if [[ "$should_update_latest" == "true" ]]; then
              echo "✅ Version ${CURRENT_VERSION} is newer than or equal to current latest (${LATEST_VERSION}), would update latest tag"
              echo "Command that would run: docker manifest create ${registry}:latest --amend ${sha_amd} --amend ${sha_arm}"
              echo "Command that would run: docker manifest push ${registry}:latest"
            else
              echo "❌ Version ${CURRENT_VERSION} is older than current latest (${LATEST_VERSION}), would NOT update latest tag"
            fi

            # Create the specific version tag regardless
            echo "Command that would run: docker manifest create ${registry}:${tag_name:-$CURRENT_VERSION} --amend ${sha_amd} --amend ${sha_arm}"
            echo "Command that would run: docker manifest push ${registry}:${tag_name:-$CURRENT_VERSION}"

            echo "===== Test completed ====="
          }

          # Call the function with simulation parameters
          create_and_push_manifests "ghcr.io/dragonflydb/dragonfly" "sha256:amd64-digest" "sha256:arm64-digest" "ubuntu" "${{ github.event.inputs.current_version }}" "false"
